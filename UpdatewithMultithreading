import java.io.*;
import java.util.*;
import java.util.concurrent.*;

public class FlightBookingApp {
    private static Scanner scanner = new Scanner(System.in);
    private static FlightBookingSystem bookingSystem = new FlightBookingSystem();

    public static void main(String[] args) {
        while (true) {
            System.out.println("Welcome to Flight Booking System");
            System.out.println("1. Log in");
            System.out.println("2. Exit");
            System.out.print("Select an option: ");
            int choice = scanner.nextInt();
            scanner.nextLine(); 
            if (choice == 1) {
                logIn();
            } else if (choice == 2) {
                System.out.println("Exiting...");
                bookingSystem.shutdown();
                break;
            } else {
                System.out.println("Invalid option.");
            }
        }
    }

    private static void logIn() {
        System.out.print("Enter First Name: ");
        String firstName = scanner.nextLine();
        System.out.print("Enter Last Name: ");
        String lastName = scanner.nextLine();

        User user = new User(firstName, lastName);
        bookingSystem.setCurrentUser(user);
        showMenu();
    }

    private static void showMenu() {
        while (true) {
            System.out.println("\nMenu");
            System.out.println("1. Search Flight");
            System.out.println("2. View Booking");
            System.out.println("3. Log out");
            System.out.print("Select an option: ");
            int choice = scanner.nextInt();
            scanner.nextLine(); 

            switch (choice) {
                case 1 -> searchFlight();
                case 2 -> viewBooking();
                case 3 -> {
                    bookingSystem.setCurrentUser(null);
                    System.out.println("Logged out.");
                    return;
                }
                default -> System.out.println("Invalid option.");
            }
        }
    }

    private static void searchFlight() {
        
        ExecutorService executorService = Executors.newSingleThreadExecutor();
        executorService.submit(() -> {
            String[] destinations = {"New York", "Los Angeles", "Chicago"};
            String[] dates = {"2024-11-10", "2024-11-12", "2024-11-15"};
            String[] times = {"10:00 AM", "02:30 PM", "06:00 PM"};

            System.out.println("\nSelect Destination:");
            for (int i = 0; i < destinations.length; i++) {
                System.out.println((i + 1) + ". " + destinations[i]);
            }
            System.out.print("Enter choice: ");
            int destinationChoice = scanner.nextInt();
            scanner.nextLine(); 
            String selectedDestination = destinations[destinationChoice - 1];

            System.out.println("\nSelect Date:");
            for (int i = 0; i < dates.length; i++) {
                System.out.println((i + 1) + ". " + dates[i]);
            }
            System.out.print("Enter choice: ");
            int dateChoice = scanner.nextInt();
            scanner.nextLine();
            String selectedDate = dates[dateChoice - 1];

            System.out.println("\nSelect Time:");
            for (int i = 0; i < times.length; i++) {
                System.out.println((i + 1) + ". " + times[i]);
            }
            System.out.print("Enter choice: ");
            int timeChoice = scanner.nextInt();
            scanner.nextLine(); 
            String selectedTime = times[timeChoice - 1];

            System.out.print("\nEnter number of people: ");
            int numberOfPeople = scanner.nextInt();
            scanner.nextLine(); 

            System.out.println("\nFlight Details:");
            System.out.println("Destination: " + selectedDestination);
            System.out.println("Date: " + selectedDate);
            System.out.println("Time: " + selectedTime);
            System.out.println("Number of Seats: " + numberOfPeople);

            System.out.print("\nConfirm booking? (yes/no): ");
            String confirm = scanner.nextLine();

            if (confirm.equalsIgnoreCase("yes")) {
                Flight selectedFlight = bookingSystem.findFlight(selectedDestination, selectedDate, selectedTime);
                if (selectedFlight != null) {
                    Reservation reservation = new Reservation("R123", bookingSystem.getCurrentUser(), selectedFlight, numberOfPeople);
                    for (int i = 0; i < numberOfPeople; i++) {
                        System.out.print("\nEnter details for passenger " + (i + 1) + ": \n");
                        System.out.print("Enter Name: ");
                        String name = scanner.nextLine();
                        System.out.print("Enter Age: ");
                        int age = scanner.nextInt();
                        scanner.nextLine(); 
                        System.out.print("Enter Gender: ");
                        String gender = scanner.nextLine();
                        System.out.print("Enter Passport Number: ");
                        String passportNumber = scanner.nextLine();

                        Passenger passenger = new Passenger(name, age, gender, passportNumber);
                        reservation.addPassenger(passenger);
                    }

                    reservation.printPassengerDetails();
                    
                    saveBookingToFile(reservation);
                } else {
                    System.out.println("No available flights match the selection.");
                }
            } else {
                System.out.println("Returning to menu.");
            }
        });
        executorService.shutdown();
    }

    private static void saveBookingToFile(Reservation reservation) {
        try (BufferedWriter writer = new BufferedWriter(new FileWriter("bookings.txt", true))) {
            writer.write("Booking ID: " + reservation.getBookingId());
            writer.newLine();
            writer.write("User: " + reservation.getUser().getFirstName() + " " + reservation.getUser().getLastName());
            writer.newLine();
            writer.write("Flight: " + reservation.getFlight().getDetails());
            writer.newLine();
            writer.write("Number of Passengers: " + reservation.getNumberOfPassengers());
            writer.newLine();
            writer.write("Passengers: ");
            for (Passenger passenger : reservation.getPassengers()) {
                writer.write(passenger.getName() + ", " + passenger.getAge() + ", " + passenger.getGender());
                writer.newLine();
            }
            writer.write("--------");
            writer.newLine();
        } catch (IOException e) {
            System.out.println("Error saving booking: " + e.getMessage());
        }
    }

    private static void viewBooking() {
        bookingSystem.viewBooking();
    }
}

class FlightBookingSystem {
    private User currentUser;

    public void setCurrentUser(User user) {
        this.currentUser = user;
    }

    public User getCurrentUser() {
        return currentUser;
    }

    public void shutdown() {
        
    }

    public Flight findFlight(String destination, String date, String time) {
        
        return new Flight(destination, date, time);
    }

    public void viewBooking() {
            System.out.println("Viewing booking...");
    }
}


class User {
    private String firstName;
    private String lastName;

    public User(String firstName, String lastName) {
        this.firstName = firstName;
        this.lastName = lastName;
    }

    public String getFirstName() {
        return firstName;
    }

    public String getLastName() {
        return lastName;
    }
}

class Flight {
    private String destination;
    private String date;
    private String time;

    public Flight(String destination, String date, String time) {
        this.destination = destination;
        this.date = date;
        this.time = time;
    }

    public String getDetails() {
        return destination + " on " + date + " at " + time;
    }
}

class Reservation {
    private String bookingId;
    private User user;
    private Flight flight;
    private int numberOfPassengers;
    private List<Passenger> passengers;

    public Reservation(String bookingId, User user, Flight flight, int numberOfPassengers) {
        this.bookingId = bookingId;
        this.user = user;
        this.flight = flight;
        this.numberOfPassengers = numberOfPassengers;
        this.passengers = new ArrayList<>();
    }

    public String getBookingId() {
        return bookingId;
    }

    public User getUser() {
        return user;
    }

    public Flight getFlight() {
        return flight;
    }

    public int getNumberOfPassengers() {
        return numberOfPassengers;
    }

    public List<Passenger> getPassengers() {
        return passengers;
    }

    public void addPassenger(Passenger passenger) {
        passengers.add(passenger);
    }

    public void printPassengerDetails() {
        System.out.println("Passenger details:");
        for (Passenger passenger : passengers) {
            System.out.println(passenger);
        }
    }
}
